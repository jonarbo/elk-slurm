input { 
	file { 
		path => ["/home/vagrant/dalma/slurm.completed.logs"]
		start_position => "beginning"
		type => "slurmctld" 
	        sincedb_path => "/dev/null"
	} 
}

filter {
 	if [type] == "slurmctld" { 
		grok {
			"break_on_match" => "false"
			patterns_dir => ["/home/vagrant/data/patterns"]
		    	match => {
				"message" => "%{TIMESTAMP_ISO8601:end},%{WORD:cluster},%{JOBID:jobid},%{WORD:partition},%{WORD:user},%{WORD:account},%{NUMBER:alloc_nodes},%{NUMBER:alloc_cpus},%{ELAPSED:elapsed_txt},%{TIMESTAMP_ISO8601:submit},%{TIMESTAMP_ISO8601:elegible},%{TIMESTAMP_ISO8601:start},%{NUMBER:cputime_h}"
			}	

			add_field => [ "elapsed_h" ]
			add_field => [ "queued_m" ]
			remove_field => ["message"]
		
		}
	
		mutate {
			convert => {
				"alloc_cpus" => "integer"
				"alloc_nodes" => "integer"
				"jobid" => "integer"
				"cputime_h" => "float"
				"elapsed_h" => "float"
				"queued_m" => "float"
			}
		}

		if [start] and [elegible] {
			ruby {
				init => "require 'time'"
				code => "
					received  =  Time.iso8601(event.get('start')).to_i;
					started =  Time.iso8601(event.get('elegible')).to_i;
					event.set('queued_m', (received - started)/60.0 );
					"
			}
		}

		if [start] and [end]{
			ruby {
				init => "require 'time'"
				code => "
					ended   =  Time.iso8601(event.get('end')).to_i;
					started =  Time.iso8601(event.get('start')).to_i;
					event.set('elapsed_h', (ended - started)/60.0/60.0 );
					"
			}
		}
		
		if [cputime_h]{
			ruby {
				code => "
					event.set('cputime_h', event.get('cputime_h')/60.0/60.0 );
					"
			}
		}
		
		date {
 			match => ["end", "ISO8601"]
    			target => "@timestamp"
		}
	}
}

output {
  elasticsearch { 
	hosts => ["localhost:9200"] 
	index => slurm
  }
  stdout { codec => rubydebug }
}

